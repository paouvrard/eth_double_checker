{"version":3,"sources":["../../src/index.ts","metamask_example.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","Arg","arg","layer","functionIndent","className","type","name","ethers","BigNumber","isBigNumber","raw","toString","JSON","stringify","funcFragment","style","marginLeft","marginTop","padding","borderRadius","backgroundColor","length","parsedArgs","map","i","App","useState","data","setData","decodedData","setDecodedData","utils","Interface","GnosisSafe","abi","ERC20","knownInterfaces","useEffect","analyseTxData","src","metamask","alt","height","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ybAAA,YAUa,gBAAgB,SAC3B,EACA,GAKE,IAHF,IAAI,EACA,EACA,GAAQ,EACE,uBAAiB,CAA1B,IAAI,EAAC,KAER,IAEE,EAAO,EAAE,mBAAmB,SAAO,MAAM,aAAa,EAAK,EAAG,GAAI,GAE5D,EAAS,EAAE,YAAY,SAAO,MAAM,aAAa,EAAK,EAAG,IACzD,GAAE,EACF,MACN,MAAO,GAED,UAGR,IAAG,EAEC,MAAG,CAAE,IAAG,GAGZ,IAAI,EAAa,EAAM,KAAI,SAAC,EAAS,GACjC,OAAO,EAAX,KACK,gBAAc,EAAS,IAAgB,CAC1C,KAAM,EAAc,OAAO,GAAG,KAC9B,KAAM,EAAc,OAAO,GAAG,UAGhC,MAAK,CAAE,aAAY,EAAE,WAAU,EAAE,IAAG,K,646vBC3CzB,MAA0B,6C,gCCSnCA,EAAS,CAAC,UAAW,UAAW,UAAW,WAEjD,SAASC,EAAT,GAAuE,IAAxDC,EAAuD,EAAvDA,IAAuD,IAAlDC,aAAkD,MAA1C,EAA0C,EAC9DC,EAAyB,EAARD,EAAY,KACnC,OACE,sBAAKE,UAAU,MAAf,UACGF,EAAQ,GACP,gCACE,iCACGD,EAAII,KADP,IACcJ,EAAIK,KADlB,IACyB,OAExBC,SAAOC,UAAUC,YAAYR,EAAIS,KAChC,iCAAOT,EAAIS,IAAIC,WAAf,OAEA,iCAAOC,KAAKC,UAAUZ,EAAIS,KAA1B,UAILT,EAAIa,cACH,sBACEC,MAAO,CACLC,WAAYb,EACZc,UAAW,MACXC,QAAS,QACTC,aAAc,MACdC,gBAAiBrB,EAAOG,EAAQH,EAAOsB,SAN3C,UASGnB,EAAQ,GAAK,iEACd,gCACE,4BAAID,EAAIa,aAAaR,KAAO,MAC3BL,EAAIqB,YACHrB,EAAIqB,WAAWC,KAAI,SAACtB,EAAKuB,GAAN,OACjB,6BACE,6BACE,cAACxB,EAAD,CAAKC,IAAKA,EAAKC,MAAOA,EAAQ,OAFzBsB,SAOf,4BAAI,YAwCCC,MAjCf,WAAgB,IAAD,EACWC,mBACtB,80CAFW,mBACNC,EADM,KACAC,EADA,OAIyBF,mBAAqB,CACzDhB,IAAK,eALM,mBAINmB,EAJM,KAIOC,EAJP,OAQeJ,mBAAS,CACnC,IAAInB,SAAOwB,MAAMC,UAAUC,EAAWC,KACtC,IAAI3B,SAAOwB,MAAMC,UAAUG,EAAMD,OAF5BE,EARM,oBAiBb,OAJAC,qBAAU,WACRP,EAAeQ,wBAAcX,EAAMS,MAClC,CAACT,EAAMS,IAGR,sBAAKhC,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACE,gEACA,qGACA,wHACA,4EAEF,qBAAMmC,IAAKC,EAAUC,IAAI,mBAAmBC,OAAO,QACnD,6CACA,0BAAUC,MAAOhB,EAAMiB,SAAU,SAACC,GAAD,OAAOjB,EAAQiB,EAAEC,OAAOH,UACzD,cAAC3C,EAAD,CAAKC,IAAK4B,QCtEDkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4a6ee76a.chunk.js","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.analyseTxData = void 0;\nvar ethers_1 = require(\"ethers\");\nvar analyseTxData = function (raw, knownInterfaces) {\n    var args;\n    var funcFragment;\n    var found = false;\n    for (var _i = 0, knownInterfaces_1 = knownInterfaces; _i < knownInterfaces_1.length; _i++) {\n        var i = knownInterfaces_1[_i];\n        // try to decode an encoded function call\n        try {\n            // decode arguments into array\n            args = i.decodeFunctionData(ethers_1.ethers.utils.hexDataSlice(raw, 0, 4), raw);\n            // get ethersjs function fragment (name and inputs types)\n            funcFragment = i.getFunction(ethers_1.ethers.utils.hexDataSlice(raw, 0, 4));\n            found = true;\n            break;\n        }\n        catch (error) {\n            // try another interface\n            continue;\n        }\n    }\n    if (!found) {\n        // not an encoded function call, return the argument\n        return { raw: raw };\n    }\n    // inject the type of each argument object into parsedArgs\n    var parsedArgs = args.map(function (argCall, i) {\n        return __assign(__assign({}, exports.analyseTxData(argCall, knownInterfaces)), { type: funcFragment.inputs[i].type, name: funcFragment.inputs[i].name });\n    });\n    return { funcFragment: funcFragment, parsedArgs: parsedArgs, raw: raw };\n};\nexports.analyseTxData = analyseTxData;\n//# sourceMappingURL=index.js.map","export default __webpack_public_path__ + \"static/media/metamask_example.9c0e035f.png\";","import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport metamask from \"./metamask_example.png\"\nimport \"./App.css\";\nimport { analyseTxData, ArgDecoded } from \"@eth_double_checker/utils\";\nimport GnosisSafe from \"./abis/GnosisSafe.json\";\nimport ERC20 from \"./abis/ERC20.json\";\n\nconst colors = [\"#d4ebc3\", \"#c3c3eb\", \"#e0c3eb\", \"#ebc3c3\"];\n\nfunction Arg({ arg, layer = 0 }: { arg: ArgDecoded; layer?: number }) {\n  const functionIndent = layer * 3 + \"em\";\n  return (\n    <div className=\"Arg\">\n      {layer > 0 && (\n        <div>\n          <span>\n            {arg.type} {arg.name}:{\" \"}\n          </span>\n          {ethers.BigNumber.isBigNumber(arg.raw) ? (\n            <span>{arg.raw.toString()},</span>\n          ) : (\n            <span>{JSON.stringify(arg.raw)},</span>\n          )}\n        </div>\n      )}\n      {arg.funcFragment && (\n        <div\n          style={{\n            marginLeft: functionIndent,\n            marginTop: \"1em\",\n            padding: \"0.8em\",\n            borderRadius: \"1em\",\n            backgroundColor: colors[layer % colors.length],\n          }}\n        >\n          {layer > 0 && <b>Found an encoded function call !</b>}\n          <div>\n            <b>{arg.funcFragment.name + \"(\"}</b>\n            {arg.parsedArgs &&\n              arg.parsedArgs.map((arg, i) => (\n                <ul key={i}>\n                  <li>\n                    <Arg arg={arg} layer={layer + 1} />\n                  </li>\n                </ul>\n              ))}\n          </div>\n          <b>{\")\"}</b>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  const [data, setData] = useState<string>(\n    \"0x6a7612020000000000000000000000004ba1a50aecba077acdf4625bf9adb3fe964eea170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008b67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000064f8dc5dd90000000000000000000000000532fb8f096decb82ace8b3f67f5c11aebe02c140000000000000000000000004421e2bde12fabbd4306642e8ec73a5d2d87d99a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000821706fbbe2f5021d28a9323e4e804ececb8b4c96f056746f8d50fb1610817ee100ae268c83a04238bc87ad19c1880f2a5f1055e3ee2fe86d5b2a5cbd2c3bfb8ae1b000000000000000000000000e6220257d157ec7b481290fd10d2037cf0e83ea5000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000\"\n  );\n  const [decodedData, setDecodedData] = useState<ArgDecoded>({\n    raw: \"loading...\",\n  });\n\n  const [knownInterfaces, ] = useState([\n    new ethers.utils.Interface(GnosisSafe.abi),\n    new ethers.utils.Interface(ERC20.abi),\n  ]);\n\n  useEffect(() => {\n    setDecodedData(analyseTxData(data, knownInterfaces));\n  }, [data, knownInterfaces]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Title\">\n        <h1>Ethereum TX input data checker</h1>\n        <h3>Double check transaction input data before signing and broadcasting</h3>\n        <h4>Gnosis Safe: parse encoded calldata to check token transfers and contract interactions</h4>\n        <h4>Supported interfaces: GnosisSafe, ERC20</h4>\n      </div>\n      <img  src={metamask} alt=\"Metamask example\" height=\"400\"></img>\n      <h2>Input data:</h2>\n      <textarea value={data} onChange={(e) => setData(e.target.value)} />\n      <Arg arg={decodedData} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}